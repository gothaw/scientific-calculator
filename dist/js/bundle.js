/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/dist/js";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/js/index.js":
/*!*************************!*\
  !*** ./src/js/index.js ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("(function () {\r\n    const toggleBtn         = document.getElementById(\"advance-options-toggle\");\r\n    const advanceOptions    = document.getElementsByClassName(\"advance-options\")[0];\r\n    const triHypFunctionBtn = document.getElementById(\"tri-hyp\");\r\n    const triHypFunctions   = document.getElementsByClassName(\"tri-hyp-function\");\r\n    const angleOptionBtn    = document.getElementById(\"deg-rad-gra\");\r\n\r\n    //true is second tab of advance options is shown\r\n    let secondTab           = false;\r\n\r\n    /**\r\n     * @name    advanceOptions\r\n     * @desc    Toggles between degrees, radians and grads on angle option button.\r\n     */\r\n    function angleOptions() {\r\n        switch (angleOptionBtn.innerHTML) {\r\n            case \"deg\":\r\n                angleOptionBtn.innerHTML=\"rad\";\r\n                break;\r\n            case \"rad\":\r\n                angleOptionBtn.innerHTML=\"gra\";\r\n                break;\r\n            default:\r\n                angleOptionBtn.innerHTML=\"deg\";\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * @name    triHypFunctions\r\n     * @desc    Toggles between trigonometric and hyperbolic options for advance functions, modifies inner HTML for these functions.\r\n     */\r\n    function triHypOptions() {\r\n        if(triHypFunctionBtn.innerHTML===\"tri\"){\r\n            triHypFunctionBtn.innerHTML=\"hyp\";\r\n            for(let btn of triHypFunctions){\r\n                btn.innerHTML+=\"h\"\r\n            }\r\n        }\r\n        else if(triHypFunctionBtn.innerHTML===\"hyp\"){\r\n            triHypFunctionBtn.innerHTML=\"tri\";\r\n            for(let btn of triHypFunctions){\r\n                btn.innerHTML=btn.innerHTML.slice(0,-1);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @name    showOptions\r\n     * @desc    Toggles between first and second tab for advance options.\r\n     */\r\n    function showOptions() {\r\n        if(secondTab){\r\n            advanceOptions.style.left = `${0}`;\r\n            secondTab = false;\r\n        }\r\n        else{\r\n            advanceOptions.style.left = `-${100}%`;\r\n            secondTab = true;\r\n        }\r\n    }\r\n\r\n    function eventHandler() {\r\n        toggleBtn.addEventListener(\"click\",showOptions);\r\n        triHypFunctionBtn.addEventListener(\"click\",triHypOptions);\r\n        angleOptionBtn.addEventListener(\"click\",angleOptions);\r\n    }\r\n\r\n    function init() {\r\n        eventHandler();\r\n    }\r\n\r\n    window.addEventListener(\"load\", init);\r\n})();\n\n//# sourceURL=webpack:///./src/js/index.js?");

/***/ }),

/***/ "./src/js/modules/calculate.js":
/*!*************************************!*\
  !*** ./src/js/modules/calculate.js ***!
  \*************************************/
/*! exports provided: originalStack */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"originalStack\", function() { return originalStack; });\n/* harmony import */ var _input_stack__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./input-stack */ \"./src/js/modules/input-stack.js\");\n/* harmony import */ var _shunting_yard__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./shunting-yard */ \"./src/js/modules/shunting-yard.js\");\n/* harmony import */ var _rpn__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./rpn */ \"./src/js/modules/rpn.js\");\n//IMPORTS\r\n\r\n\r\n\r\n//EXPORTS\r\nlet originalStack = [];\r\n/**\r\n END OF EXPORTS AND IMPORTS\r\n **/\r\n(function () {\r\n    const calculateButton   = document.querySelector(\"#equals\");\r\n    /**\r\n     * @name        resetCalculator\r\n     * @desc        Resets the calculator by invoking functions that update the inputStack and reset postfix and output stacks.\r\n     * @param       error {boolean}\r\n     */\r\n    function resetCalculator(error=false) {\r\n        Object(_input_stack__WEBPACK_IMPORTED_MODULE_0__[\"updateInputStack\"])(error);\r\n        Object(_shunting_yard__WEBPACK_IMPORTED_MODULE_1__[\"resetPostfixStack\"])();\r\n        Object(_rpn__WEBPACK_IMPORTED_MODULE_2__[\"resetOutputStack\"])();\r\n    }\r\n    /**\r\n     * @name        displayOutput\r\n     * @desc        Function used to display the result of the calculation in mainOutputField.\r\n     *              If NaN or Infinity are the result, it sets the mainInputField to '0'.\r\n     *              The function also invokes resetInputTag function.\r\n     */\r\n    function displayOutput() {\r\n        Object(_input_stack__WEBPACK_IMPORTED_MODULE_0__[\"resetInputTag\"])();\r\n        _input_stack__WEBPACK_IMPORTED_MODULE_0__[\"mainOutputField\"].innerHTML=`${_input_stack__WEBPACK_IMPORTED_MODULE_0__[\"inputTag\"].innerHTML} = ${_rpn__WEBPACK_IMPORTED_MODULE_2__[\"output\"]}`;\r\n        (_rpn__WEBPACK_IMPORTED_MODULE_2__[\"output\"]===Infinity || isNaN(_rpn__WEBPACK_IMPORTED_MODULE_2__[\"output\"]))? _input_stack__WEBPACK_IMPORTED_MODULE_0__[\"inputTag\"].innerHTML=0 : _input_stack__WEBPACK_IMPORTED_MODULE_0__[\"inputTag\"].innerHTML=_rpn__WEBPACK_IMPORTED_MODULE_2__[\"output\"].toString();\r\n    }\r\n    /**\r\n     * @name        modifyInfixStack\r\n     * @desc        Modifies infix stack by replacing '-1*' with '-1' and '*'. It also adds missing ']' to the end of the stack.\r\n     */\r\n    function modifyInfixStack() {\r\n        //console.log(\"Infix Stack:\",infixStack);\r\n        let unbalancedSquareBrackets=0;\r\n        for(let token of _input_stack__WEBPACK_IMPORTED_MODULE_0__[\"inputStack\"]){\r\n            if(token===\"-1*\"){\r\n                let index = _input_stack__WEBPACK_IMPORTED_MODULE_0__[\"inputStack\"].indexOf(token);\r\n                _input_stack__WEBPACK_IMPORTED_MODULE_0__[\"inputStack\"].splice(index,1,\"-1\",\"*\");\r\n            }\r\n            else if(token===\"[\"){\r\n                unbalancedSquareBrackets++;\r\n            }\r\n            else if(token===\"]\"){\r\n                unbalancedSquareBrackets--;\r\n            }\r\n        }\r\n        for(let i=0;i<unbalancedSquareBrackets;i++){\r\n            _input_stack__WEBPACK_IMPORTED_MODULE_0__[\"inputStack\"].push(\"]\")\r\n        }\r\n        //console.log(\"Modified Infix Stack\",infixStack);\r\n    }\r\n    /**\r\n     * @name        duplicateInfixStack\r\n     * @desc        Creates a new stack, which stores all values from infixStack.\r\n     */\r\n    function duplicateInfixStack() {\r\n        originalStack = _input_stack__WEBPACK_IMPORTED_MODULE_0__[\"inputStack\"].slice();\r\n        //console.log(\"Original Stack:\",originalStack);\r\n    }\r\n\r\n    function eventHandler() {\r\n        calculateButton.addEventListener(\"click\", function (){\r\n            if((!isNaN(_input_stack__WEBPACK_IMPORTED_MODULE_0__[\"inputStack\"][_input_stack__WEBPACK_IMPORTED_MODULE_0__[\"inputStack\"].length-1]) || _input_stack__WEBPACK_IMPORTED_MODULE_0__[\"requiredSpecialTokens\"].includes(_input_stack__WEBPACK_IMPORTED_MODULE_0__[\"inputStack\"][_input_stack__WEBPACK_IMPORTED_MODULE_0__[\"inputStack\"].length-1])) && Object(_input_stack__WEBPACK_IMPORTED_MODULE_0__[\"balancingLeftBrackets\"])(_input_stack__WEBPACK_IMPORTED_MODULE_0__[\"inputStack\"])===0) {\r\n                try{\r\n                    duplicateInfixStack();\r\n                    modifyInfixStack();\r\n                    Object(_shunting_yard__WEBPACK_IMPORTED_MODULE_1__[\"shuntingYard\"])();\r\n                    Object(_rpn__WEBPACK_IMPORTED_MODULE_2__[\"reversePolishNotation\"])();\r\n                    displayOutput();\r\n                    resetCalculator();\r\n                }\r\n                catch (e) {\r\n                    alert(e);\r\n                    resetCalculator(true);\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    function init() {\r\n        eventHandler();\r\n    }\r\n\r\n    window.addEventListener(\"load\", init);\r\n\r\n})();\n\n//# sourceURL=webpack:///./src/js/modules/calculate.js?");

/***/ }),

/***/ "./src/js/modules/factorial.js":
/*!*************************************!*\
  !*** ./src/js/modules/factorial.js ***!
  \*************************************/
/*! exports provided: factorial */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"factorial\", function() { return factorial; });\n/**\r\n * @name        factorial\r\n * @desc        Returns factorial of a number. Works only for positive integers.\r\n * @param       number\r\n * @returns     {number}\r\n */\r\nfunction factorial(number)\r\n{\r\n    if (number<0){\r\n        throw \"Factorial works only for positive integer number\";\r\n    }\r\n    if (number === 0)\r\n    { return 1; }\r\n    else\r\n    { return number * factorial( number - 1 ); }\r\n}\r\n\n\n//# sourceURL=webpack:///./src/js/modules/factorial.js?");

/***/ }),

/***/ "./src/js/modules/input-stack.js":
/*!***************************************!*\
  !*** ./src/js/modules/input-stack.js ***!
  \***************************************/
/*! exports provided: mainOutputField, mainInputField, inputTag, inputStack, requiredSpecialTokens, functionTokens, updateInputStack, resetInputTag, balancingLeftBrackets */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mainOutputField\", function() { return mainOutputField; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mainInputField\", function() { return mainInputField; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"inputTag\", function() { return inputTag; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"inputStack\", function() { return inputStack; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"requiredSpecialTokens\", function() { return requiredSpecialTokens; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"functionTokens\", function() { return functionTokens; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"updateInputStack\", function() { return updateInputStack; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"resetInputTag\", function() { return resetInputTag; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"balancingLeftBrackets\", function() { return balancingLeftBrackets; });\n/* harmony import */ var _rpn__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./rpn */ \"./src/js/modules/rpn.js\");\n/* harmony import */ var _calculate__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./calculate */ \"./src/js/modules/calculate.js\");\n//IMPORTS\r\n\r\n\r\n//EXPORTS\r\nconst mainOutputField        = document.querySelector(\".output\");\r\nconst mainInputField         = document.querySelector(\".input\");\r\n// inputTag - initiating, which HTML tag is an input tag for user input.\r\nlet inputTag                 = mainInputField;\r\n// inputStack - input stack containing operations and operands showed in the input field.\r\nlet inputStack=[];\r\n// requiredSpecialTokens - special non numerical tokens which:\r\n// 1. are required to be at the end of the stack when basicOperations token is entered\r\n// 2. are required to be at the end of the stack when \")\" is entered\r\n// 4. are required to be at the end of the stack when \"^\" or \"x√\" is entered\r\n// 3. are post multiplied\r\n// 4. need to at the end of equation when calculate function is invoked\r\nconst requiredSpecialTokens  = [\")\",\"&pi;\",\"e\",\"!\"];\r\n// functionTokens - tokens for functions trigonometric, hyperbolic, logarithms (excluding x-root).\r\nconst functionTokens         = [\"√\",\"tan\",\"tanh\",\"atan\",\"atanh\",\"cos\",\"acos\",\"cosh\",\"acosh\",\"sin\",\"asin\",\"sinh\",\"asinh\",\"log\",\"ln\"];\r\n/**\r\n * @name        updateInputStack\r\n * @desc        Sets the inputStack to an empty array. If no calculations have been carried out before, it and pushes \"0\" to the stack.\r\n *              \"0\" is also pushed if calculations gave result of NaN or Infinity.\r\n *              If user carried out calculations and result is a finite number the function pushes output as the first element.\r\n *              If an error is thrown in calculate.js, unmodified originalStack is assigned to inputStack.\r\n * @param       error {boolean} with default value of false.\r\n */\r\nfunction updateInputStack(error=false) {\r\n    if(error){\r\n        inputStack=_calculate__WEBPACK_IMPORTED_MODULE_1__[\"originalStack\"];\r\n    }\r\n    else{\r\n        inputStack=[];\r\n        (_rpn__WEBPACK_IMPORTED_MODULE_0__[\"output\"]===undefined || _rpn__WEBPACK_IMPORTED_MODULE_0__[\"output\"]===Infinity || isNaN(_rpn__WEBPACK_IMPORTED_MODULE_0__[\"output\"]))? inputStack.push(\"0\"):inputStack.push(_rpn__WEBPACK_IMPORTED_MODULE_0__[\"output\"].toString())\r\n    }\r\n}\r\n/**\r\n * @name        resetInputTag\r\n * @desc        Sets the inputTag to mainInputField.\r\n */\r\nfunction resetInputTag() {\r\n    inputTag = mainInputField;\r\n}\r\n/**\r\n * @name        balancingLeftBrackets\r\n * @desc        Loops through a string or an array and counts how many unbalanced '(' are in it.\r\n * @param       textString {string, array}\r\n * @returns     number {int} of unbalanced left brackets.\r\n */\r\nfunction balancingLeftBrackets(textString){\r\n    let count=0;\r\n    for(let token of textString){\r\n        if(token===\"(\"){\r\n            count++;\r\n        }\r\n        else if(token===\")\"){\r\n            count--;\r\n        }\r\n    }\r\n    return count;\r\n}\r\n/**\r\n END OF EXPORTS AND IMPORTS\r\n **/\r\n(function () {\r\n    const buttons                   = document.querySelectorAll(\".btn\");\r\n    const triHypFunctions           = document.querySelectorAll(\".tri-hyp-function\");\r\n    // basicOperations - tokens for basic operations + factorial symbol.\r\n    const basicOperations           = [\"+\",\"-\",\"*\",\"/\",\"!\",\"mod\"];\r\n    // tokensNotPreMultiplied - tokens not required to be pre multiplied i.e. if entered after a number or ')'.\r\n    const tokensNotPreMultiplied    = [\"+\",\"-\",\"*\",\"/\",\")\",\"^\",\"!\",\"x-root\",\"mod\"];\r\n\r\n    //console.log(inputStack);\r\n\r\n    /**\r\n     * @name    buttonsEvents\r\n     * @desc    Switch function used to control calculator buttons.\r\n     *          Each case refers to one button and default behavior used for numbers 0-9.\r\n     * @param   index {int} button index assigned in eventHandler.\r\n     */\r\n    function buttonsEvents(index) {\r\n        switch (buttons[index].id) {\r\n            // Advance Buttons\r\n            case \"x-to-y\":\r\n                addOperation(\"^\");\r\n                break;\r\n            case \"x-square\":\r\n                addOperation(\"^\",\"2\");\r\n                break;\r\n            case \"10-to-x\":\r\n                initialClear();\r\n                addNumber(\"10\");\r\n                addOperation(\"^\");\r\n                break;\r\n            case \"tan\":\r\n                initialClear();\r\n                addToInputStack(triHypFunctions[0].innerHTML);\r\n                addToInputStack(\"(\");\r\n                break;\r\n            case \"log\":\r\n                initialClear();\r\n                addToInputStack(\"log\");\r\n                addToInputStack(\"(\");\r\n                break;\r\n            case \"cos\":\r\n                initialClear();\r\n                addToInputStack(triHypFunctions[1].innerHTML);\r\n                addToInputStack(\"(\");\r\n                break;\r\n            case \"mod\":\r\n                addOperation(\"mod\");\r\n                break;\r\n            case \"sin\":\r\n                initialClear();\r\n                addToInputStack(triHypFunctions[2].innerHTML);\r\n                addToInputStack(\"(\");\r\n                break;\r\n            case \"x-root\":\r\n                addOperation(\"x-root\");\r\n                break;\r\n            case \"x-cube\":\r\n                addOperation(\"^\",\"3\");\r\n                break;\r\n            case \"e\":\r\n                initialClear();\r\n                addToInputStack(\"e\");\r\n                break;\r\n            case \"atan\":\r\n                initialClear();\r\n                addToInputStack(triHypFunctions[3].innerHTML);\r\n                addToInputStack(\"(\");\r\n                break;\r\n            case \"ln\":\r\n                initialClear();\r\n                addToInputStack(\"ln\");\r\n                addToInputStack(\"(\");\r\n                break;\r\n            case \"acos\":\r\n                initialClear();\r\n                addToInputStack(triHypFunctions[4].innerHTML);\r\n                addToInputStack(\"(\");\r\n                break;\r\n            case \"n!\":\r\n                addOperation(basicOperations[4]);\r\n                break;\r\n            case \"asin\":\r\n                initialClear();\r\n                addToInputStack(triHypFunctions[5].innerHTML);\r\n                addToInputStack(\"(\");\r\n                break;\r\n            // Top Row Buttons\r\n            case \"backspace\":\r\n                removeFromInputStack(\"backspace\");\r\n                break;\r\n            case \"bracket-right\":\r\n                addRightBracket();\r\n                break;\r\n            case \"bracket-left\":\r\n                initialClear();\r\n                addToInputStack(\"(\");\r\n                break;\r\n            case \"plus-minus\":\r\n                plusMinus();\r\n                break;\r\n            case \"sqrt\":\r\n                initialClear();\r\n                addToInputStack(\"√\");\r\n                addToInputStack(\"(\");\r\n                break;\r\n            case \"one-over-x\":\r\n                addNumber(\"1\");\r\n                addOperation(basicOperations[3]);\r\n                break;\r\n            case \"pi\":\r\n                initialClear();\r\n                addToInputStack(\"&pi;\");\r\n                break;\r\n            // Basic Buttons\r\n            case \"clear-entry\":\r\n                removeFromInputStack(\"clear-entry\");\r\n                break;\r\n            case \"clear\":\r\n                removeFromInputStack(\"clear\");\r\n                break;\r\n            case \"divide\":\r\n                addOperation(basicOperations[3]);\r\n                break;\r\n            case \"times\":\r\n                addOperation(basicOperations[2]);\r\n                break;\r\n            case \"minus\":\r\n                addOperation(basicOperations[1]);\r\n                break;\r\n            case \"plus\":\r\n                addOperation(basicOperations[0]);\r\n                break;\r\n            case \"dot\":\r\n                addDecimalPoint();\r\n                break;\r\n            default:\r\n                addToInputStack(buttons[index].innerHTML);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @name    addToInputStack\r\n     * @desc    Adds a token to input stack and invokes displayInput function.\r\n     *          The function also adds pre multiplication in first two if statements for certain tokens.\r\n     * @param   token to be added to inputStack.\r\n     */\r\n    function addToInputStack(token) {\r\n        if(isNaN(token) && !(tokensNotPreMultiplied.includes(token)) && !isNaN(inputStack[inputStack.length - 1])){\r\n            if(inputStack[inputStack.length - 1]===\"0\") {\r\n                displayInput(token);\r\n                inputStack[inputStack.length - 1] = token;\r\n            }\r\n            else {\r\n                displayInput(`*${token}`);\r\n                inputStack.push(\"*\", token);\r\n            }\r\n        }\r\n        else if(!(tokensNotPreMultiplied.includes(token)) && requiredSpecialTokens.includes(inputStack[inputStack.length - 1])) {\r\n            displayInput(`*${token}`);\r\n            inputStack.push(\"*\", token);\r\n        }\r\n        else if(!isNaN(token) && (!isNaN(inputStack[inputStack.length - 1]))) {\r\n            if ((token!==\"0\")&&(inputStack[inputStack.length - 1] === \"0\")){\r\n                displayInput(token);\r\n                inputStack[inputStack.length - 1] = token;\r\n            }\r\n            else if((inputStack[inputStack.length - 1] !== \"0\")){\r\n                displayInput(token);\r\n                inputStack[inputStack.length - 1] += token;\r\n            }\r\n        }\r\n        else {\r\n            displayInput(token);\r\n            inputStack.push(token);\r\n        }\r\n        //console.log(inputStack);\r\n    }\r\n\r\n    /**\r\n     * @name    displayInput\r\n     * @desc    Function invoked in addToInputStack function. It adds a token to the inputField.\r\n     *          If a token is exponential or x-root an additional <sup> tag is added to HTML. These <sup> tags are children of mainInputField.\r\n     *          The function switches between <sup> tags and mainInputField DOM element depending on tokens added to the inputStack.\r\n     *          This is carried out by assigning different values of DOM elements to inputTag.\r\n     *          The function also adds ']' to inputStack after exiting <sup> tag, these tokens are used to wrap exponent of '^' operator.\r\n     * @param   token {string} token to be displayed in inputTag.\r\n     */\r\n    function displayInput(token) {\r\n\r\n        let unbalancedLeftBrackets;\r\n\r\n        if(token===\"^\")\r\n        {\r\n            let placeholder = document.createTextNode(\"□\");\r\n            let superscript = document.createElement(\"SUP\");\r\n            superscript.appendChild(placeholder);\r\n            inputTag.appendChild(superscript);\r\n            inputTag=inputTag.lastChild;\r\n        }\r\n        else if(token===\"x-root\")\r\n        {\r\n            let degree;\r\n            let superscript = document.createElement(\"SUP\");\r\n            let indexNumber=inputStack.length-1;\r\n            let numberOfRightBrackets=0;\r\n            while(indexNumber>=0 && isNaN(inputStack[indexNumber]) && inputStack[indexNumber]!==\"&pi;\" && inputStack[indexNumber]!==\"e\"){\r\n                if(inputStack[indexNumber]===\")\")\r\n                {\r\n                    numberOfRightBrackets++;\r\n                }\r\n                indexNumber--;\r\n            }\r\n            if(numberOfRightBrackets===0){\r\n                degree = document.createTextNode(inputTag.innerHTML.slice(inputTag.innerHTML.lastIndexOf(inputStack[indexNumber],inputTag.innerHTML.length)));\r\n                inputTag.innerHTML=inputTag.innerHTML.slice(0,inputTag.innerHTML.lastIndexOf(inputStack[indexNumber]));\r\n                superscript.appendChild(degree);\r\n                inputTag.appendChild(superscript);\r\n            }\r\n            else{\r\n                let numberOfLeftBrackets=0;\r\n                let indexLastLeftBracket=inputTag.innerHTML.length-1;\r\n                for(let i=0;indexLastLeftBracket>=0 && numberOfLeftBrackets<numberOfRightBrackets;i++){\r\n                    if(inputTag.innerHTML.charAt(indexLastLeftBracket-i)===\"(\"){\r\n                        numberOfLeftBrackets++;\r\n                        indexLastLeftBracket-=i;\r\n                    }\r\n                    else if(inputTag.innerHTML.charAt(indexLastLeftBracket-i)===\")\"){\r\n                        numberOfRightBrackets++;\r\n                    }\r\n                }\r\n                degree = inputTag.innerHTML.slice(indexLastLeftBracket,inputTag.innerHTML.length);\r\n                inputTag.innerHTML=inputTag.innerHTML.slice(0,indexLastLeftBracket);\r\n                inputTag.appendChild(superscript);\r\n                inputTag=inputTag.lastChild;\r\n                inputTag.innerHTML+=degree;\r\n                inputTag=inputTag.parentNode;\r\n            }\r\n            inputTag.innerHTML+=\"&radic;\";\r\n        }\r\n        else\r\n        {\r\n            if(inputStack[inputStack.length-1]===\"0\" && !basicOperations.includes(token) && token!==\".\" && token!==\")\"){\r\n                inputTag.innerHTML=inputTag.innerHTML.slice(0,-1)+token;\r\n            }\r\n            else {\r\n                if(inputTag.tagName===\"SUP\"){\r\n                    if(inputTag.innerHTML.charAt(0)===\"□\"){\r\n                        inputTag.innerHTML=\"\";\r\n                    }\r\n                    unbalancedLeftBrackets=balancingLeftBrackets(inputTag.innerHTML);\r\n                    if(basicOperations.includes(token) || token.charAt(0)===\"*\") {\r\n                        while (inputTag.tagName===\"SUP\" && unbalancedLeftBrackets===0)\r\n                        {\r\n                            inputTag=inputTag.parentNode;\r\n                            inputStack.push(\"]\");\r\n                            unbalancedLeftBrackets=balancingLeftBrackets(inputTag.innerHTML);\r\n                        }\r\n                    }\r\n                }\r\n                inputTag.innerHTML+=token;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @name    removeFromInputStack\r\n     * @desc    Function used to remove tokens from inputStack and update inner HTML of an inputTag.\r\n     *          The function has three options - 'backspace' removes last token, 'clear entry' clears input, 'clear' clears input and output.\r\n     *          The 'backspace' option removes <sup> tags if certain tokens in the stack are removed.\r\n     *          It also switches between <sup> tags and mainInputField DOM element.\r\n     * @param   option {string}\r\n     */\r\n    function removeFromInputStack(option) {\r\n        switch (option) {\r\n            case \"backspace\":\r\n                if((!isNaN(inputStack[inputStack.length - 1])))\r\n                {\r\n                    inputTag.innerHTML=inputTag.innerHTML.slice(0,-1);\r\n                    inputStack[inputStack.length - 1]=inputStack[inputStack.length - 1].slice(0,-1);\r\n                    if(inputStack[inputStack.length -1].length === 0) {\r\n                        inputStack.pop();\r\n                    }\r\n                }\r\n                else if(inputStack[inputStack.length-1]===\"[\" && inputStack[inputStack.length-2]===\"^\"){\r\n                    inputTag.innerHTML=inputTag.innerHTML.slice(0,-1);\r\n                    inputStack.splice(-2);\r\n                    inputTag=inputTag.parentNode;\r\n                    let inputTagChild = inputTag.lastChild;\r\n                    inputTagChild.remove();\r\n                }\r\n                else if(inputStack[inputStack.length-1]===\"x-root\"){\r\n                    inputTag.innerHTML=inputTag.innerHTML.slice(0,-1);\r\n                    let inputTagChild = inputTag.lastChild;\r\n                    inputTagChild.remove();\r\n                    inputTag.innerHTML+=inputTagChild.innerHTML;\r\n                    inputStack.pop();\r\n                }\r\n                else if(inputStack[inputStack.length-1]===\"(\" && functionTokens.includes(inputStack[inputStack.length-2])){\r\n                    inputTag.innerHTML=inputTag.innerHTML.slice(0,inputTag.innerHTML.lastIndexOf(inputStack[inputStack.length - 2]));\r\n                    inputStack.splice(-2);\r\n                }\r\n                else{\r\n                    inputTag.innerHTML=inputTag.innerHTML.slice(0,inputTag.innerHTML.lastIndexOf(inputStack[inputStack.length - 1]));\r\n                    inputStack.pop();\r\n                }\r\n                while (inputStack[inputStack.length-1]===\"]\"){\r\n                    inputStack.pop();\r\n                    inputTag=inputTag.lastChild;\r\n                }\r\n                if(inputStack[inputStack.length-1]===\"[\"){\r\n                    inputTag.innerHTML+=\"□\"\r\n                }\r\n                if(inputStack.length===0)\r\n                {\r\n                    inputTag.innerHTML=\"0\";\r\n                    inputStack.push(\"0\");\r\n                }\r\n                //console.log(inputStack);\r\n                break;\r\n            case \"clear-entry\":\r\n                inputStack=[\"0\"];\r\n                mainInputField.innerHTML=\"0\";\r\n                inputTag=mainInputField;\r\n                //console.log(inputStack);\r\n                break;\r\n            case \"clear\":\r\n                inputStack=[\"0\"];\r\n                mainInputField.innerHTML=\"0\";\r\n                mainOutputField.innerHTML=\"\";\r\n                inputTag=mainInputField;\r\n                //console.log(inputStack);\r\n                break;\r\n            default:\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @name    addDecimalPoint\r\n     * @desc    Adds decimal point to a number or adds '0.' to input stack.\r\n     */\r\n    function addDecimalPoint() {\r\n       if(isNaN(inputStack[inputStack.length - 1])) {\r\n           addToInputStack(\"0.\");\r\n       }\r\n       else if(inputStack[inputStack.length - 1].indexOf(\".\") === -1) {\r\n           displayInput(\".\");\r\n           inputStack[inputStack.length - 1] += \".\";\r\n       }\r\n    }\r\n\r\n    /**\r\n     * @name    addOperation\r\n     * @desc    Adds operation if last token in stack is a number or [')','&pi;','e','!'].\r\n     *          For exponential function, it adds '[', which are not displayed in the inputTag.\r\n     *          The purpose of this token is to wrap the power function.\r\n     * @param   token {string} operation token.\r\n     * @param   exp {string} exponent of the '^' operator, by default equal to '0'.\r\n     */\r\n    function addOperation(token, exp=\"0\") {\r\n        if(!isNaN(inputStack[inputStack.length-1]) || requiredSpecialTokens.includes(inputStack[inputStack.length-1])) {\r\n            addToInputStack(token);\r\n            if(token===\"^\"){\r\n                inputStack.push(\"[\");\r\n                if(exp!==\"0\"){\r\n                    addNumber(exp);\r\n                }\r\n            }\r\n            else if(token===\"x-root\")\r\n            {\r\n                addToInputStack(\"(\");\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @name    addRightBracket\r\n     * @desc    Adds ')' to inputStack if last token in stack is a number or one of [')','&pi;','e','!'].\r\n     *          The function calls balancingLeftBracketFunction to find if there are unbalanced '(' in the inputTag.\r\n     *          It also switches between parents of current inputTag to find a DOM element with unbalanced '('.\r\n     *          If no unbalanced left brackets are found, ')' is not added.\r\n     */\r\n    function addRightBracket(){\r\n        let unbalancedLeftBrackets = balancingLeftBrackets(inputTag.innerHTML);\r\n        if ((!isNaN(inputStack[inputStack.length-1]) || requiredSpecialTokens.includes(inputStack[inputStack.length-1])))\r\n        {\r\n            if(unbalancedLeftBrackets>0){\r\n                addToInputStack(\")\");\r\n            }\r\n            else if(unbalancedLeftBrackets===0){\r\n                let numberOfSquareBrackets=0;\r\n                let originalInputTag = inputTag;\r\n                while(inputTag.tagName===\"SUP\"){\r\n                    inputTag=inputTag.parentNode;\r\n                    numberOfSquareBrackets++;\r\n                    let unbalancedLeftBrackets = balancingLeftBrackets(inputTag.innerHTML);\r\n                    if(unbalancedLeftBrackets>0){\r\n                        let squareBracketsArray = Array.from({length:numberOfSquareBrackets},() => ']');\r\n                        inputStack.push(...squareBracketsArray);\r\n                        addToInputStack(\")\");\r\n                        break\r\n                    }\r\n                }\r\n                if(inputStack[inputStack.length-1]!==\")\"){\r\n                    inputTag=originalInputTag;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @name    addNumber\r\n     * @desc    Function which adds a number. It is used for operations that include numbers i.e. 10^x or 1/x.\r\n     *          It allows the number to be pre multiplied if entered after another number.\r\n     * @param   number {string}\r\n     */\r\n    function addNumber(number) {\r\n        if(!isNaN(inputStack[inputStack.length-1]) && (inputStack[0]!==\"0\" || inputStack.length!==1)){\r\n            addOperation(basicOperations[2]);\r\n        }\r\n        addToInputStack(number);\r\n    }\r\n\r\n    /**\r\n     * @name    plusMinus\r\n     * @desc    Alternates between + and -, if +/- operation stands before the number (last item in the stack).\r\n     *          If there is a different operation before the number, an additional token (-1*) is introduced/removed before then number.\r\n     *          This token is later on, changed to '-1' and '*' when calculate button is clicked.\r\n     *          If last token is operation + or -, the function alternates between the two.\r\n     */\r\n    function plusMinus() {\r\n        if(!isNaN(inputStack[inputStack.length-1]) || inputStack[inputStack.length-1]===\"&pi;\" || inputStack[inputStack.length-1]===\"e\"){\r\n            let index;\r\n            if(inputStack[inputStack.length-2]===\"+\"){\r\n                index=inputTag.innerHTML.lastIndexOf(\"+\");\r\n                inputTag.innerHTML=inputTag.innerHTML.slice(0,index)+\"-\"+inputTag.innerHTML.slice(index+1,inputTag.innerHTML.length);\r\n                inputStack[inputStack.length-2]=\"-\";\r\n            }\r\n            else if(inputStack[inputStack.length-2]===\"-\"){\r\n                index=inputTag.innerHTML.lastIndexOf(\"-\");\r\n                inputTag.innerHTML=inputTag.innerHTML.slice(0,index)+\"+\"+inputTag.innerHTML.slice(index+1,inputTag.innerHTML.length);\r\n                inputStack[inputStack.length-2]=\"+\";\r\n            }\r\n            else if (inputStack[inputStack.length-1]!==\"0\"){\r\n                let lastNumberInStack=inputStack[inputStack.length-1];\r\n                if(inputStack[inputStack.length-2]===\"-1*\"){\r\n                    index=inputTag.innerHTML.lastIndexOf(\"-\");\r\n                    inputTag.innerHTML=inputTag.innerHTML.slice(0,index)+inputTag.innerHTML.slice(index+1,inputTag.innerHTML.length);\r\n                    inputStack.splice(-2);\r\n                    inputStack.push(lastNumberInStack);\r\n                }\r\n                else{\r\n                    index=inputTag.innerHTML.lastIndexOf(lastNumberInStack);\r\n                    inputTag.innerHTML=inputTag.innerHTML.slice(0,index)+\"-\"+inputTag.innerHTML.slice(index,inputTag.innerHTML.length);\r\n                    inputStack.pop();\r\n                    inputStack.push(\"-1*\",lastNumberInStack);\r\n                }\r\n            }\r\n        }\r\n        else if(inputStack[inputStack.length-1]===\"+\") {\r\n            inputStack[inputStack.length-1]=\"-\";\r\n            inputTag.innerHTML=inputTag.innerHTML.slice(0,-1)+\"-\";\r\n        }\r\n        else if(inputStack[inputStack.length-1]===\"-\"){\r\n            inputStack[inputStack.length-1]=\"+\";\r\n            inputTag.innerHTML=inputTag.innerHTML.slice(0,-1)+\"+\";\r\n        }\r\n        //console.log(inputStack);\r\n    }\r\n\r\n    /**\r\n     * @name    initialClear\r\n     * @desc    Removes '0' from inputStack and input field when first token is introduced.\r\n     */\r\n    function initialClear(){\r\n        if(inputStack[0]===\"0\" && inputStack.length===1)\r\n        {\r\n            inputStack.pop();\r\n            mainInputField.innerHTML=\"\"\r\n        }\r\n    }\r\n\r\n\r\n    function eventHandler() {\r\n        for(let i=0;i<buttons.length;i++){\r\n            buttons[i].addEventListener('click', function () {\r\n                buttonsEvents(i);\r\n            });\r\n        }\r\n    }\r\n\r\n    function init() {\r\n        updateInputStack();\r\n        eventHandler();\r\n    }\r\n\r\n    window.addEventListener(\"load\", init);\r\n})();\n\n//# sourceURL=webpack:///./src/js/modules/input-stack.js?");

/***/ }),

/***/ "./src/js/modules/rpn.js":
/*!*******************************!*\
  !*** ./src/js/modules/rpn.js ***!
  \*******************************/
/*! exports provided: output, outputStack, resetOutputStack, reversePolishNotation */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"output\", function() { return output; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"outputStack\", function() { return outputStack; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"resetOutputStack\", function() { return resetOutputStack; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"reversePolishNotation\", function() { return reversePolishNotation; });\n/* harmony import */ var _shunting_yard__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./shunting-yard */ \"./src/js/modules/shunting-yard.js\");\n/* harmony import */ var _factorial__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./factorial */ \"./src/js/modules/factorial.js\");\n//IMPORTS\r\n\r\n\r\n//EXPORTS\r\n//output - primitive used to store the final value of calculation\r\nlet output;\r\n//outputStack - stack used to store value of calculations carried out in postfix evaluation\r\nlet outputStack=[];\r\n/**\r\n * @name        resetOutputStack\r\n * @desc        Resets the outputStack to an empty array.\r\n */\r\nfunction resetOutputStack() {\r\n    outputStack=[];\r\n}\r\n\r\n/**\r\n * @name        reversePolishNotation\r\n * @desc        Functions carries out Reverse Polish Notation evaluation on a postfix stack obtained from shunting yard algorithm.\r\n *              Algorithm description: https://en.wikipedia.org/wiki/Reverse_Polish_notation#Postfix_evaluation_algorithm\r\n */\r\nfunction reversePolishNotation() {\r\n    for (let token of _shunting_yard__WEBPACK_IMPORTED_MODULE_0__[\"postfixStack\"]){\r\n        if(!isNaN(token)){\r\n            outputStack.push(JSON.parse(token));\r\n        }\r\n        else {\r\n            let tokenIndex = operationsArray.findIndex(name => name.token === token);\r\n            let numberOfOperands = operationsArray[tokenIndex].numberOfOperands;\r\n            if(numberOfOperands===1){\r\n                let operand = outputStack.pop();\r\n                outputStack.push(operationsArray[tokenIndex].calculation(operand));\r\n            }\r\n            else if(numberOfOperands===2){\r\n                let operand1 = outputStack.pop();\r\n                let operand2 = outputStack.pop();\r\n                outputStack.push(operationsArray[tokenIndex].calculation(operand2,operand1));\r\n            }\r\n        }\r\n    }\r\n    output=+outputStack[0].toFixed(14);\r\n    //console.log(\"Output Stack:\",outputStack);\r\n}\r\n/**\r\n END OF EXPORTS AND IMPORTS\r\n **/\r\nconst angleOptionBtn    = document.getElementById(\"deg-rad-gra\");\r\n//operationsArray - an array with object literals for each operation and function.\r\n//For each object it defines a token, numberOfOperands and calculation function.\r\nconst operationsArray = [\r\n    {\r\n        token: \"!\",\r\n        numberOfOperands: 1,\r\n        calculation: (x) => {return Object(_factorial__WEBPACK_IMPORTED_MODULE_1__[\"factorial\"])(x)}\r\n    },\r\n    {\r\n        token: \"^\",\r\n        numberOfOperands: 2,\r\n        calculation: (x,y) => {return Math.pow(x,y)}\r\n    },\r\n    {\r\n        token: \"x-root\",\r\n        numberOfOperands: 2,\r\n        calculation: (x,y) => {return Math.pow(y,1/x)}\r\n    },\r\n    {\r\n        token: \"√\",\r\n        numberOfOperands: 1,\r\n        calculation: (x) => {return Math.sqrt(x)}\r\n    },\r\n    {\r\n        token: \"tan\",\r\n        numberOfOperands: 1,\r\n        calculation: (x) => {return Math.tan(angleInRadians(x))}\r\n    },\r\n    {\r\n        token: \"cos\",\r\n        numberOfOperands: 1,\r\n        calculation: (x) => {return Math.cos(angleInRadians(x))}\r\n    },\r\n    {\r\n        token: \"sin\",\r\n        numberOfOperands: 1,\r\n        calculation: (x) => {return Math.sin(angleInRadians(x))}\r\n    },\r\n    {\r\n        token: \"atan\",\r\n        numberOfOperands: 1,\r\n        calculation: (x) => {return calculateAngle(Math.atan(x))}\r\n    },\r\n    {\r\n        token: \"acos\",\r\n        numberOfOperands: 1,\r\n        calculation: (x) => {return calculateAngle(Math.acos(x))}\r\n    },\r\n    {\r\n        token: \"asin\",\r\n        numberOfOperands: 1,\r\n        calculation: (x) => {return calculateAngle(Math.asin(x))}\r\n    },\r\n    {\r\n        token: \"tanh\",\r\n        numberOfOperands: 1,\r\n        calculation: (x) => {return Math.tanh(x)}\r\n    },\r\n    {\r\n        token: \"cosh\",\r\n        numberOfOperands: 1,\r\n        calculation: (x) => {return Math.cosh(x)}\r\n    },\r\n    {\r\n        token: \"sinh\",\r\n        numberOfOperands: 1,\r\n        calculation: (x) => {return Math.sinh(x)}\r\n    },\r\n    {\r\n        token: \"atanh\",\r\n        numberOfOperands: 1,\r\n        calculation: (x) => {return Math.atanh(x)}\r\n    },\r\n    {\r\n        token: \"acosh\",\r\n        numberOfOperands: 1,\r\n        calculation: (x) => {return Math.acosh(x)}\r\n    },\r\n    {\r\n        token: \"asinh\",\r\n        numberOfOperands: 1,\r\n        calculation: (x) => {return Math.asinh(x)}\r\n    },\r\n    {\r\n        token: \"ln\",\r\n        numberOfOperands: 1,\r\n        calculation: (x) => {return Math.log(x)}\r\n    },\r\n    {\r\n        token: \"log\",\r\n        numberOfOperands: 1,\r\n        calculation: (x) => {return Math.log10(x)}\r\n    },\r\n    {\r\n        token: \"mod\",\r\n        numberOfOperands: 2,\r\n        calculation: (x,y) => {return x%y}\r\n    },\r\n    {\r\n        token: \"*\",\r\n        numberOfOperands: 2,\r\n        calculation: (x,y) => {return x*y}\r\n    },\r\n    {\r\n        token: \"/\",\r\n        numberOfOperands: 2,\r\n        calculation: (x,y) => {return x/y}\r\n    },\r\n    {\r\n        token: \"+\",\r\n        numberOfOperands: 2,\r\n        calculation: (x,y) => {return x+y}\r\n    },\r\n    {\r\n        token: \"-\",\r\n        numberOfOperands: 2,\r\n        calculation: (x,y) => {return x-y}\r\n    }\r\n];\r\n\r\n/**\r\n * @name        angleInRadians\r\n * @desc        Changes angle given in degrees/radians/grads to radians. Used in trigonometric functions.\r\n *              The option depends on the inner HTML of angleOptionBtn DOM element.\r\n * @param       {number} angle in radians/degrees/grads\r\n * @returns     {number} angle in radians\r\n */\r\nfunction angleInRadians(angle) {\r\n    if(angleOptionBtn.innerHTML===\"deg\"){\r\n        angle*=Math.PI/180;\r\n    }\r\n    else if(angleOptionBtn.innerHTML===\"gra\"){\r\n        angle*=Math.PI/200;\r\n    }\r\n    return angle\r\n}\r\n\r\n/**\r\n * @name        calculateAngle\r\n * @desc        Changes angle in radians calculated by inverse trigonometric functions to degrees/grads or radians.\r\n *              The option depends on the inner HTML of angleOptionBtn DOM element.\r\n * @param       {number} angle in radians\r\n * @returns     {number} angle in radians/degrees/grads\r\n */\r\nfunction calculateAngle(angle){\r\n    if(angleOptionBtn.innerHTML===\"deg\"){\r\n        angle*=180/Math.PI;\r\n    }\r\n    else if(angleOptionBtn.innerHTML===\"gra\"){\r\n        angle*=200/Math.PI;\r\n    }\r\n    return angle\r\n}\r\n\n\n//# sourceURL=webpack:///./src/js/modules/rpn.js?");

/***/ }),

/***/ "./src/js/modules/shunting-yard.js":
/*!*****************************************!*\
  !*** ./src/js/modules/shunting-yard.js ***!
  \*****************************************/
/*! exports provided: postfixStack, resetPostfixStack, shuntingYard */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"postfixStack\", function() { return postfixStack; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"resetPostfixStack\", function() { return resetPostfixStack; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"shuntingYard\", function() { return shuntingYard; });\n/* harmony import */ var _input_stack__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./input-stack */ \"./src/js/modules/input-stack.js\");\n//IMPORTS\r\n\r\n//EXPORTS\r\n//postfixStack - stack used to store postfix equation i.e. result of shunting yard algorithm\r\nlet postfixStack=[];\r\n/**\r\n * @name        resetPostfixStack\r\n * @desc        Resets the postfixStack to an empty array.\r\n */\r\nfunction resetPostfixStack() {\r\n    postfixStack=[];\r\n}\r\n/**\r\n * @name        shuntingYard\r\n * @desc        Function that carries out shunting yard algorithm on inputStack.\r\n *              It produces a post fix notation for given infix notation.\r\n *              It stores output in postfixStack. Operators and functions are stored in operatorStack.\r\n *              Algorithm description: https://en.wikipedia.org/wiki/Shunting-yard_algorithm#The_algorithm_in_detail\r\n */\r\nfunction shuntingYard() {\r\n    let operatorStack=[];\r\n    for(let token of _input_stack__WEBPACK_IMPORTED_MODULE_0__[\"inputStack\"]){\r\n        if(!isNaN(token)){\r\n            postfixStack.push(token);\r\n        }\r\n        else if(token===\"e\"){\r\n            postfixStack.push(Math.exp(1).toString());\r\n        }\r\n        else if(token===\"&pi;\"){\r\n            postfixStack.push(Math.PI.toString());\r\n        }\r\n        else if(_input_stack__WEBPACK_IMPORTED_MODULE_0__[\"functionTokens\"].includes(token) || token===\"(\" || token===\"[\"){\r\n            operatorStack.push(token)\r\n        }\r\n        else if((token===\")\" || token===\"]\") && operatorStack.length!==0){\r\n            while(operatorStack.length!==0 && (operatorStack[operatorStack.length-1]!==\"(\" && operatorStack[operatorStack.length-1]!==\"[\")){\r\n                postfixStack.push(operatorStack[operatorStack.length-1]);\r\n                operatorStack.pop();\r\n            }\r\n            operatorStack.pop();\r\n        }\r\n        else{\r\n            while(operatorStack.length!==0 && _input_stack__WEBPACK_IMPORTED_MODULE_0__[\"functionTokens\"].includes(operatorStack[operatorStack.length-1]) || firstTokenHasPrecedence(operatorStack[operatorStack.length-1],token) && (operatorStack[operatorStack.length-1]!==\"(\" || operatorStack[operatorStack.length-1]!==\"[\")){\r\n                postfixStack.push(operatorStack[operatorStack.length-1]);\r\n                operatorStack.pop()\r\n            }\r\n            operatorStack.push(token);\r\n        }\r\n    }\r\n    while(operatorStack.length!==0){\r\n        postfixStack.push(operatorStack.pop());\r\n    }\r\n    //console.log(\"Postfix Stack:\", postfixStack);\r\n    //console.log(operatorStack);\r\n}\r\n/**\r\n END OF EXPORTS AND IMPORTS\r\n **/\r\n//precedenceArray - array of object literals for each operation, does not include functions which are treated separately,\r\n//for each operation it defines precedence and associativity.\r\nconst precedenceArray = [\r\n    {\r\n        token: \"!\",\r\n        precedence: 5,\r\n        associativity: \"left\"\r\n    },\r\n    {\r\n        token: \"^\",\r\n        precedence: 4,\r\n        associativity: \"right\"\r\n    },\r\n    {\r\n        token: \"x-root\",\r\n        precedence: 4,\r\n        associativity: \"right\"\r\n    },\r\n    {\r\n        token: \"mod\",\r\n        precedence: 3,\r\n        associativity: \"left\"\r\n    },\r\n    {\r\n        token: \"*\",\r\n        precedence: 2,\r\n        associativity: \"left\"\r\n    },\r\n    {\r\n        token: \"/\",\r\n        precedence: 2,\r\n        associativity: \"left\"\r\n    },\r\n    {\r\n        token: \"+\",\r\n        precedence: 1,\r\n        associativity: \"left\"\r\n    },\r\n    {\r\n        token: \"-\",\r\n        precedence: 1,\r\n        associativity: \"left\"\r\n    }\r\n];\r\n/**\r\n * @name        firstTokenHasPrecedence\r\n * @desc        checks whether token1 has greater precedence thank token2,\r\n *              if tokens have equal precedence but token1 has left associativity than token1 takes precedence\r\n * @param       token1 {string} token which is checked for precedence against token2\r\n * @param       token2 {string} token which is compared to when checking token1\r\n * @returns     {boolean}\r\n */\r\nfunction firstTokenHasPrecedence(token1, token2) {\r\n    let hasPrecedence=false;\r\n    let indexOfToken1 = precedenceArray.findIndex(name => name.token === token1);\r\n    let indexOfToken2 = precedenceArray.findIndex(name => name.token === token2);\r\n    if (indexOfToken1!==-1 && indexOfToken2!==-1){\r\n        let precedenceOfToken1 = precedenceArray[indexOfToken1].precedence;\r\n        let precedenceOfToken2 = precedenceArray[indexOfToken2].precedence;\r\n        let associativityOfToken1 = precedenceArray[indexOfToken1].associativity;\r\n        if(precedenceOfToken1 > precedenceOfToken2 || (precedenceOfToken1===precedenceOfToken2 && associativityOfToken1===\"left\")){\r\n            hasPrecedence = true;\r\n        }\r\n    }\r\n    return hasPrecedence;\r\n}\r\n\r\n\r\n\r\n\n\n//# sourceURL=webpack:///./src/js/modules/shunting-yard.js?");

/***/ }),

/***/ 0:
/*!*************************************************************!*\
  !*** multi ./src/js/index.js ./src/js/modules/calculate.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("__webpack_require__(/*! ./src/js/index.js */\"./src/js/index.js\");\nmodule.exports = __webpack_require__(/*! ./src/js/modules/calculate.js */\"./src/js/modules/calculate.js\");\n\n\n//# sourceURL=webpack:///multi_./src/js/index.js_./src/js/modules/calculate.js?");

/***/ })

/******/ });